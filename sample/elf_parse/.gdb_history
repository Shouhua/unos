p file_header->e_entry
p /x file_header->e_entry
list
n
q
b 190
run hello
p /x file_header->e_entry
p /x buf
p /x (Elf_Ehdr*)buf
p /x *(Elf_Ehdr*)buf
info proc
q
b 188
run hello
info proc
p /x buf
n
p /x buf+entry_p_header->p_offset
p /x entry_p_header->p_memsz
echo $?
q
b 188
run hello
n
p errno
bs
bt
q
b 190
run hello
info proc
n
q
b 201
q
b 201
run hello
p /x buf
help p
q
b 205
run hello
si
si
si
q
b 205
run hello
si
info r rcx
p r8
p /x *r8
info r r8
si
q
b 198
run hello
n
p /x p_header->p_type
p PT_LOAD
n
n
q
b 213
run hello-pie
n
p /x p_header
p /x *p_header
n
n
p /x *p_header
b 218 if p_header->p_vaddr=0x2f20
c
p /x *p_header
n
n
p /x base+p_header->p_vaddr
info proc
p /x *p_header
n
n
n
display *p_header
n
n
p /x *p_header
n
p /x *p_header
n
bs
backtrace 
p /x *p_header
q
b 218
run build/bin/entry_point 
n
p /x start
p /x start & !0xfff
p /x (start & !0xfff)
p /x (start & (!0xfff))
p /x (start & (!0x0000000000000fff))
p /x (0x400000 & (!0x0000000000000fff))
p /g (0x400000 & (!0x0000000000000fff))
p /x !0xfff
p /x !0x0fff
p !0x0fff
p !0xfff
p !0x0fff
p !0x0ff0
p !0x0f00
p !0x0000
p /x (start & ~0xfff)
q
b 262
run build/bin/entry_point 
n
n
si
p /x ptr
info proc
si
si
n
si
info r rdi
info r
info r rip
si
p /x rip + 0x2ef3
p /x $rip + 0x2ef3
j
q
b 262
run hello-pie
n
si
si
si
p /x $rsi
p /x *$rsi
info proc
x /16wx *$rsi
x /16wx $rsi
n
n
n
n
q
q
b 106
run hello-mov-pie
p /x dyn
ptype dyn
p /x *dyn
p /x header
p /x *header
q
b 93
run hello-mov-pie
p /x p_header->p_offset
p /x header
p /x header+p_header->p_offset
p /x 0x555555614ab0
p /x *0x555555614ab0
q
b 109
run hello-mov-pie
n
p /x dyn
n
n
d dyn
p /x dyn
n
display dyn
display *dyn
n
p *dyn
n
p *dyn
n
p *dyn
n
p *dyn
n
p *dyn
p *dyn = NULL
p *dyn = 0
p *dyn =0 0
p *dyn == 0
p /x dyn
p /x dyn==NULL
q
b 391
run hello-mov-pie
n
b 392
d 1
c
p /x base
p /x rela->r_offset
p /x base + rela->r_offset
p /x *(base+rela->r_offset)
ptype *(base+rela->r_offset)
ptype /o *(base+rela->r_offset)
n
n
n
n
q
b 392
run hello-mov-pie
p /x base + rela->r_addend
p /x base + rela->r_offset
p /x *((uint*)base + rela->r_offset)
p /x *((uint*)(base + rela->r_offset))
x /10wx 0x401007
x /10wx 0x401005
n
n
n
si
x /10wx 0x401005
p /x *((uint*)(base + rela->r_offset))
n
n
n
*((uint*)(base+rela->r_offset)) = base + rela->r_addend
q
b 392
run hello-mov-pie
si
si
si
si
info r rax edi
info r rax edx
p /x *rax
p /x *$rax
q
b 392
run hello-mov-pie
help contextoutput 
contextoutput stack tru
contextoutput stack true
q
q
b 392
run hello-mov-pie
q
run hello-mov-pie
b 392
run hello-mov-pie
n
q
